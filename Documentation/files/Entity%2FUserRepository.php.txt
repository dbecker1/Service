<?php

namespace Maclay\ServiceBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    //incredibly inefficient way to do this... need to find a better way
    /**
     * This method gets all users by their role.
     * 
     * @param Role $role
     * @return array
     */
    public function findByRole($role){
        $query = $this->getEntityManager()
                ->createQuery(
                        "SELECT u "
                        . "FROM MaclayServiceBundle:User u "
                  )
                ->getResult();
        
        foreach($query as $key => $user){
            $isRole = false;
            foreach($user->getRoles() as $r){
                if (strpos($r, $role) !== false){
                    $isRole = true;
                }
            }
            if ($isRole === false){
                unset($query[$key]);
            }
        }
        return $query;
    }
    
    /**
     * This method returns all of the uninvited users.
     * 
     * @return array
     */
    public function getUninvitedUsers(){
        $query = $this->getEntityManager()
                ->createQuery(
                            "SELECT u"
                            . " FROM MaclayServiceBundle:User u "
                            . "WHERE u.isInvited = false"
                        )
                ->getResult();
        
        return $query;
        
    }
    
    /**
     * This method gets users by gender and grade.
     * 
     * @param int $grade
     * @param string $gender
     * @return array
     */
    public function getUsersForClub($grade, $gender){
        $query = $this->getEntityManager()
                ->createQuery(
                            "SELECT u "
                            . "FROM MaclayServiceBundle:User u "
                            . "JOIN u.studentinfo s "
                            . "WHERE s.grade = :grade AND s.gender = :gender"
                        )
                ->setParameter("grade", $grade)
                ->setParameter("gender", $gender)
                ->getResult();
        
        return $query;
    }
    
    /**
     * This method gets a student by their student number.
     * 
     * @param int $number
     * @return User
     */
    public function getUserByStudentNumber($number){
        $query = $this->getEntityManager()
                ->createQuery(
                            "SELECT u "
                            . "FROM MaclayServiceBundle:User u "
                            . "JOIN u.studentinfo s "
                            . "WHERE s.studentNumber = :number"
                        )
                ->setParameter("number", $number)
                ->setMaxResults(1)
                ->execute();
        
        return $query;
    }
    
    /**
     * This method gets all users with a last name
     * 
     * @param string $lastName
     * @return array
     */
    public function getStudentsByLastName($lastName){
        $query = $this->getEntityManager()
                ->createQuery(
                            "SELECT u "
                            . "FROM MaclayServiceBundle:User u "
                            . "WHERE u. lastName LIKE :lastName"
                        )
                ->setParameter("lastName", $lastName)
                ->getResult();
        
        return $query;
    }
}

